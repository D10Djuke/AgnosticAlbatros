// <auto-generated />
using AgnosticAlbatros.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AgnosticAlbatros.Migrations
{
    [DbContext(typeof(DeliContext))]
    [Migration("20171214025643_user_update")]
    partial class user_update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AgnosticAlbatros.Models.Buffet", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<long>("TotalPrice");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.ToTable("Buffets");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.BuffetDishCoupling", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BuffetID");

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("DishID");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<double>("Price");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("BuffetID");

                    b.HasIndex("DishID");

                    b.ToTable("BuffetDishCouplings");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.City", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CountryID");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("ZipCode");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Client", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNumber");

                    b.Property<string>("AddressStreet");

                    b.Property<bool>("Archived");

                    b.Property<long>("CityID");

                    b.Property<long>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("VAT");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Company", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNumber");

                    b.Property<string>("AddressStreet");

                    b.Property<bool>("Archived");

                    b.Property<long>("CityID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("VAT");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Country", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Dish", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<long>("KitchenID");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Preparation");

                    b.Property<int>("PricePerPerson");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("KitchenID");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.DishComponent", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Preparation");

                    b.Property<double>("PricePerPerson");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.ToTable("DishComponents");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.DishComponentCoupling", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Count");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("DishComponentID");

                    b.Property<long>("DishID");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<double>("Price");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("DishComponentID");

                    b.HasIndex("DishID");

                    b.ToTable("DishComponentCouplings");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.DishComponentIngredientCoupling", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("DichComponentID");

                    b.Property<long?>("DishComponentID");

                    b.Property<Guid>("Guid");

                    b.Property<long>("IngredientID");

                    b.Property<string>("Notes");

                    b.Property<double>("Price");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("DishComponentID");

                    b.HasIndex("IngredientID");

                    b.ToTable("DishComponentIngredientCouplings");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Ingredient", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<long>("StoreID");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("StoreID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Kitchen", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<long>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Kitchens");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Order", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.OrderBuffetCoupling", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BuffetID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<int>("NumberOfPersons");

                    b.Property<long>("OrderId");

                    b.Property<double>("Price");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("BuffetID");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderBuffetCouplings");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.OrderDishCoupling", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("DishID");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<int>("NumberOfPersons");

                    b.Property<long>("OrderID");

                    b.Property<double>("Price");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("DishID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDishCouplings");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Quote", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNumber");

                    b.Property<string>("AddressStreet");

                    b.Property<long>("CityID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<int>("GuestCount");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<long>("OrderID");

                    b.Property<long>("TotalPrice");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("OrderID");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Store", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNumber");

                    b.Property<string>("AddressStreet");

                    b.Property<bool>("Archived");

                    b.Property<long>("CityID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<long>("CompanyID");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Guid");

                    b.Property<long>("KitchenID");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastSeen");

                    b.Property<string>("PassWord");

                    b.Property<string>("Tel1");

                    b.Property<string>("Tel2");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<long>("UserTitleID");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("KitchenID");

                    b.HasIndex("UserTitleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.UserTitle", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Archived");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<long?>("UserTitleID");

                    b.HasKey("ID");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserTitleID");

                    b.ToTable("UserTitles");
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.BuffetDishCoupling", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Buffet", "Buffet")
                        .WithMany()
                        .HasForeignKey("BuffetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.City", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Client", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Company", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Dish", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Kitchen", "Kitchen")
                        .WithMany()
                        .HasForeignKey("KitchenID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.DishComponentCoupling", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.DishComponent", "DishComponent")
                        .WithMany()
                        .HasForeignKey("DishComponentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.DishComponentIngredientCoupling", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.DishComponent", "DishComponent")
                        .WithMany()
                        .HasForeignKey("DishComponentID");

                    b.HasOne("AgnosticAlbatros.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Ingredient", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Kitchen", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.OrderBuffetCoupling", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Buffet", "Buffet")
                        .WithMany()
                        .HasForeignKey("BuffetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.OrderDishCoupling", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Quote", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.Store", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.User", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.Kitchen", "Kitchen")
                        .WithMany("Users")
                        .HasForeignKey("KitchenID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.UserTitle", "UserTitle")
                        .WithMany("Users")
                        .HasForeignKey("UserTitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AgnosticAlbatros.Models.UserTitle", b =>
                {
                    b.HasOne("AgnosticAlbatros.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AgnosticAlbatros.Models.UserTitle")
                        .WithMany("UserTitles")
                        .HasForeignKey("UserTitleID");
                });
#pragma warning restore 612, 618
        }
    }
}
